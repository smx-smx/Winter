@page "/"
@using Photino.NET
@using Smx.Winter.Cbs.Native
@using Smx.Winter.Gui.Controllers
@using Smx.Winter.Gui.Models
@using Smx.Winter.Cbs.Enumerators

<div>
    <RadzenButton Click="StartCbsSession">Start CBS Session</RadzenButton>
    <RadzenCheckBox TValue="bool"
        Name="use_system_drive" @bind-Value="@_useSystemDrive" />
    <RadzenLabel Text="Use System Drive" Component="use_system_drive" />
</div>
<RadzenLabel>@_currentDir</RadzenLabel>
<RadzenProgressBarCircular Visible="@_loading"></RadzenProgressBarCircular>
<p style="color: red">@_error</p>

<RadzenStack
Orientation="Orientation.Vertical"
AlignItems="AlignItems.Start"
Visible="@(_session != null)"
>
    <RadzenButton Click="GetPackages">Get Components</RadzenButton>
    <RadzenLabel Text="Package Filter" Component="PackageFilter" />
    <RadzenTextBox Name="PackageFilter"
    oninput="@((ChangeEventArgs e) => _searchFilter = e.Value?.ToString() ?? string.Empty)" />
</RadzenStack>

<RadzenDataList
AllowVirtualization="false"
AllowPaging="true"
Data="@(_packages.Where(pkg => pkg.StringId.Contains(_searchFilter, StringComparison.InvariantCultureIgnoreCase)))">
    <Template Context="pkg">
        <RadzenPanel>
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                    <RadzenIcon Icon="account_box" class="rz-me-1" /><b>@pkg.StringId</b>
                </RadzenText>
            </HeaderTemplate>
            <ChildContent>
            </ChildContent>
        </RadzenPanel>
    </Template>
</RadzenDataList>

@inject PhotinoWindow window;
@implements IDisposable

@code {
    private string _searchFilter = string.Empty;
    private string _currentDir = string.Empty;
    private WinterSession? _session = null;
    private bool _loading = false;
    private string _error = string.Empty;
    private bool _useSystemDrive = false;

    private IList<CbsPackageViewModel> _packages = new List<CbsPackageViewModel>();
    private IList<string> _sources = new List<string>();

    public void Dispose()
    {
        _session?.Dispose();
    }

    private void GetPackages()
    {
        if (_session == null) return;
        _packages = _session.GetPackages().Select(pkg => new CbsPackageViewModel(pkg)).ToList();
    }

    private void StartCbsSession()
    {
        var winDir = _useSystemDrive
            ? Directory.GetParent(Environment.GetFolderPath(Environment.SpecialFolder.System))!.FullName
            : window.ShowOpenFolder("Choose Windows Directory").FirstOrDefault();

        if (winDir == null) return;
        var bootDrive = Path.GetPathRoot(winDir);
        if (bootDrive == null) return;

        _currentDir = winDir;
        _loading = true;
        _error = string.Empty;

        _session?.Dispose();
        try {
            _session = new WinterSession(new Models.StartCbsSessionCommand
            {
                BootDrive = bootDrive,
                WinDir = winDir
            });
        } catch (Exception ex)
        {
            _error = ex.ToString();
        } finally
        {
            _loading = false;
        }
    }
}
