<?php
$IDL = $argv[1];
$TLB = 'Smx.Winter.Cbs.Native.tlb';
$HDR = 'Smx.Winter.Cbs.Native.h';
$DLL = 'Smx.Winter.Cbs.Native.dll';

if(false){
	$x = file_get_contents($IDL);
	/** fixups for IDL generated by OleViewDotNet */
	$r = [
	'[Guid(' => '[uuid(',
	'[Out]' => '[out]',
	'[In]' => '[in]',
	'[In, Out]' => '[in, out]',
	'UIntPtr' => '__int3264',
	'/* Stack Offset: 8 */ ' => ''
	];
	foreach($r as $from => $to){
		$x = str_replace($from, $to, $x);
	}

	/** collect interfaces for forward declaration */
	preg_match_all("/interface (.*?) /", $x, $m);

	$interfaces = implode(PHP_EOL, array_map(
		fn($x) => "interface {$x};", $m[1]));

	file_put_contents('out.idl', <<<EOS
	import "unknwn.idl";

	{$interfaces}

	$x
	EOS);
}

function proc_exec(array $args){
	$hProc = proc_open($args, [], $p);
	return proc_close($hProc);
}

function rmrf(string $dir){
	$files = new RecursiveIteratorIterator(
		new RecursiveDirectoryIterator($dir, RecursiveDirectoryIterator::SKIP_DOTS),
		RecursiveIteratorIterator::CHILD_FIRST
	);
	
	foreach ($files as $fileinfo) {
		$todo = ($fileinfo->isDir() ? 'rmdir' : 'unlink');
		$todo($fileinfo->getRealPath());
	}
	
	rmdir($dir);
}

function path_combine(string ...$parts){ return implode(DIRECTORY_SEPARATOR, $parts); }


foreach([$TLB, $HDR, $DLL] as $f){
	if(file_exists($f)) unlink($f);
}

// idl -> tlb
proc_exec([
	'midl', $IDL, '/x64',
	'/h', $HDR,
	'/tlb', $TLB
]);
// tlb -> dll
proc_exec([
	'tlbimp', $TLB, "/out:{$DLL}"
]);

if(file_exists('cbs')){
	rmrf('cbs');
}
// decompile dll
proc_exec(['ilspycmd', $DLL, '-p', '-o', 'cbs']);

/** cleanup decompiled code */
foreach(glob(path_combine('cbs', pathinfo($DLL, PATHINFO_FILENAME), '*.cs')) as $f){
	$lines = file($f);
	$out = new SplFileObject($f, 'w');
	$lastDel = null;
	foreach($lines as $i => $l){
		if(str_contains($l, '[MethodImpl')
		|| str_contains($l, '[ComConversionLoss]')) {
			$lastDel = $i;
			continue;
		}
		if($lastDel !== null && $i > $lastDel && empty(trim($l))) {
			continue;
		}
		if(str_contains($l, 'namespace cbs;')){
			$l = str_replace('namespace cbs;', 'namespace Winter.Cbs.Native;', $l);
		}
		$out->fwrite($l);
	}
}
